<!DOCTYPE html>
<html lang="en">

<head>
    <% include ../partials/head.ejs %>
    <link rel="stylesheet" href="/stylesheets/notes.css">
    <!--    <link rel="stylesheet" href="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.5.0/build/styles/default.min.css">-->
    <link rel="stylesheet"
          href="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.5.0/build/styles/atom-one-dark.min.css">
</head>

<body class="bg-dark-blue">
<% include ../partials/navbar.ejs %>
<div class="alert alert-absolute bg-primary border-1 border-white text-white alert-dismissible fade show bottom-0 end-0 "
     role="alert">
    <strong class="pe-5 ps-2">Saved!</strong>
    <button class=" btn-close btn-close-white" data-bs-dismiss="alert" aria-label="Close"></button>
</div>
<div class="container-fluid mt-4">
    <div class="d-flex flex-column mx-4">
        <div class="d-flex flex-row justify-content-start">
            <div class="col-6 bg-transparent text-start d-flex flex-row justify-content-between">
                <div class="col-2 bg-warning ps-3 fs-3">Edit note</div>
                <div class="col-10">
                    <input type="text" id="noteTitle" aria-label="Note Title"
                           class="border-bottom-input titleInputField text-light bg-dark fs-5 ps-4 py-2 px-1 h-100"
                           placeholder="Unnamed Note">
                </div>
            </div>
            <div class="col-5 bg-transparent text-start d-flex flex-row justify-content-between">
                <div class="col-3 bg-warning text-center fs-3">
                    Link Project
                </div>
                <div class="col-9 border-bottom-input">
                    <select aria-label="Link project" class=" bg-dark text-light border-0 h-100 w-100"
                            name="linkProject" id="linkProject"></select>
                </div>
            </div>
            <div class="col-1 bg-warning fs-3 text-end pe-3" id="notePreviewLink">Preview</div>
        </div>
        <div class="d-flex flex-row justify-content-around">
            <div class="col-6 flex-grow-1 vh-85 note-editor-border">
                <textarea aria-label="Note Contents" name="edit" id="noteContents"
                          class="bg-dark text-light w-100 h-100 p-3"></textarea>
            </div>
            <div id="notePreview" class="col-6 flex-grow-1 bg-dark vh-85 note-editor-border text-light p-3"
                 style="overflow-y: auto"></div>
        </div>
    </div>
</div>

<% include ../partials/footer.ejs %>
<script src="https://cdn.jsdelivr.net/npm/dompurify@2/dist/purify.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script src="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.5.0/build/highlight.min.js"></script>
<script src="/javascripts/utils.js"></script>
<script>
    marked.setOptions({
        highlight: (code, language) => {
            const validLanguage = hljs.getLanguage(language) ? language : 'plaintext';
            if (hljs.getLanguage(language)) {
                return `<div class="code-block">${hljs.highlight(validLanguage, code).value}</div>`;
            }
            return `<div class="code-block">${hljs.highlightAuto(code).value}</div>`;
        },
        smartLists: true,
        xhtml: true
    });

    hljs.initHighlighting();

    let noteId = "<%= noteId %>";
    let lastCommittedTitle = undefined;
    let lastCommittedContents = undefined;
    let lastCommittedProject = undefined;

    let projectMap = {};
    let activeProject = undefined;
    let selectInput = $('#linkProject');

    let noteTitleElement = $('#noteTitle');
    let noteContentsElement = $('#noteContents');
    let notePreviewElement = $('#notePreview');

    let previewTimeout = undefined;
    let saveTimeout = undefined;

    $(() => {
        $(window).on('keydown', event => {
            if (event.keyCode === 83 && event.ctrlKey) {
                event.preventDefault();
                clearTimeout(previewTimeout);
                clearTimeout(saveTimeout);
                previewNote();
                saveChanges();

                return false;
            }
        });

        getNote(noteId, note => {
            lastCommittedTitle = unescape(note.title);
            lastCommittedContents = unescape(note.contents);
            lastCommittedProject = note.linkedProject;
            queuePreview();
            refreshProjects();
        })

        noteContentsElement.bind('input propertychange', () => {
            queuePreview();
            queueAutoSave();
        });

        noteTitleElement.bind('input propertychange', () => {
            queueAutoSave();
        });

        selectInput.on('change', event => {
            lastCommittedProject = event.target.value;
            $.ajax({
                url: '/notes/update/linked-project',
                type: 'patch',
                data: {noteId: noteId, linkedProject: event.target.value},
                success: () => {
                    refreshProjects();
                }
            });
        });

        $('#notePreviewLink').on('click', () => {
            window.location.href = `/notes/view/${noteId}`;
        })
    });

    function getNote(noteId, callback) {
        $.ajax({
            url: `/notes/get/${noteId}`,
            type: 'get',
            success: data => {
                onLoadNote(data, callback);
            },
            error: err => {
                console.error(err);
            }
        });
    }

    function onLoadNote(data, callback) {
        noteTitleElement.val(unescape(data['note'].title));
        noteContentsElement.val(unescape(data['note'].contents));
        if (callback) callback(data['note']);
    }

    function saveChanges(callback) {
        console.log("Saving!");
        let title = noteTitleElement.val();
        let contents = noteContentsElement.val();

        if (title !== lastCommittedTitle) {
            $.ajax({
                url: '/notes/update/title',
                type: 'patch',
                data: {noteId: noteId, title: escape(title)},
                success: () => {
                    console.log("Successfully saved title");
                    lastCommittedTitle = title;
                }
            });
        }

        if (contents !== lastCommittedContents) {
            $.ajax({
                url: '/notes/update/contents',
                type: 'patch',
                data: {noteId: noteId, contents: escape(contents)},
                success: () => {
                    console.log("Successfully saved contents");
                    lastCommittedContents = contents;
                }
            });
        }
    }

    function refreshProjects(callback) {
        $.ajax({
            url: '/project/get',
            type: 'get',
            success: data => {
                onLoadProjects(data, callback);
            },
            error: err => {
                console.error(err);
            }
        });
    }

    function onLoadProjects(data, callback) {
        // reset
        projectMap = {};
        selectInput.html("");

        selectInput.append(`<option value='-1' ${lastCommittedProject === undefined || lastCommittedProject == -1 ? 'selected' : ''}>None</option>`);
        data.projects.forEach(project => {
            projectMap[project.id] = project;
            selectInput.append(`<option value='${project.id}' ${lastCommittedProject == project.id ? 'selected' : ''}>${project.name}</option>`)
        });
        if (callback) callback();
    }

    function queuePreview() {
        clearTimeout(previewTimeout);
        previewTimeout = setTimeout(() => previewNote(), 100);
    }

    function queueAutoSave() {
        clearTimeout(saveTimeout);
        saveTimeout = setTimeout(() => saveChanges(), 1000);
    }

    function previewNote() {
        let noteContents = noteContentsElement.val();
        let markdown = marked(noteContents);
        let purified = DOMPurify.sanitize(markdown);
        notePreviewElement.html(purified);
    }

</script>
<script type="module">
    import * as indentation from '/javascripts/indent-textarea/index.js';

    const noteContentsTextArea = document.querySelector('#noteContents');
    indentation.watch(noteContentsTextArea);
</script>
</body>
</html>