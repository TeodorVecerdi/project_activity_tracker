<!DOCTYPE html>
<html lang="en">
<head>
    <% include ../partials/head.ejs %>
</head>
<body class="bg-dark-blue">
<% include ../partials/navbar.ejs %>
<div class="container px-3 px-lg-0">
    <form class="row mt-5" id="add-project-form" method="post">
        <div class="col-12 col-lg-11">
            <div class="bg-dark">
                <input type="text" class="form-control bg-dark text-light border-primary" id="projectName"
                       name="projectName" placeholder="Add project">
            </div>
        </div>
        <div class="d-none d-lg-block col-1">
            <button id="submit-button" type="submit" class="btn btn-sm btn-floating btn-primary grey-text"
                    title="Create">
                <i class="fa fa-plus"></i>
            </button>
        </div>
    </form>
    <section class="mt-5">
        <h1 class="title text-light">Projects</h1>
        <div id="projects">
        </div>
    </section>
</div>

<% include ../partials/footer.ejs %>

<script type="text/javascript" src="/javascripts/utils.js"></script>
<script>
    let activeTimers = {};
    let breakTimers = {};
    $(() => {
        refreshProjects();
        setInterval(() => {
            updateTimers();
        }, 75);
    });
    $('#add-project-form').on('submit', (evt) => {
        evt.preventDefault();
        let formData = $('#add-project-form').serialize();
        $.ajax({
            url: '/project/create',
            type: 'post',
            data: formData,
            success: () => {
                $('#add-project-form').trigger('reset');
                refreshProjects();
            }
        });
    });

    function refreshProjects() {
        $.ajax({
            url: '/project/get',
            type: 'get',
            success: data => {
                onLoadProjects(data);
            },
            error: err => {
                console.error(err);
            }
        })
    }

    function onLoadProjects(data) {
        // Reset
        $('#projects').html("");
        activeTimers = {};
        breakTimers = {};

        data.projects.forEach(project => {
            let isActive = data.activeProjects.hasOwnProperty(project.id);
            let isBreakActive = data.activeBreaks.hasOwnProperty(project.id);
            let titleClasses = isActive ? isBreakActive ? 'fst-italic text-secondary' : 'text-primary' : 'text-grey';
            let activeButtonClasses = `btn ${isActive ? 'btn-primary' : 'btn-outline-primary'}`;
            let breakButtonClasses = `btn ${isBreakActive ? 'btn' : 'btn-outline'}-${isActive ? "secondary" : "blue-grey disabled border"}`;

            let activeTimer = isActive ? `<span id="activeTimer-${project.id}" class="fw-light text-primary">Active: 00:00:00</span>` : "";
            let breakTimer = isBreakActive ? `<span id="breakTimer-${project.id}" class="fw-light text-secondary">On break: 00:00:00</span>` : "";
            let timers = isActive || isBreakActive ? `<span class="text-light fst-normal float-end">(${activeTimer}${isActive && isBreakActive ? ',&nbsp;' : ''}${breakTimer})</span>` : '';
            $('#projects').append(`
                    <div class="project-item mb-2 mt-3 mt-lg-0 row" id="project-${project.id}" data-project-id="${project.id}" data-project-active="${isActive}" data-break-active="${isBreakActive}">
                        <span class="fs-6 fs-lg-4 fw-bold col-12 col-lg-7 project-title align-self-center text-shadow ${titleClasses}">${project.name}
                            ${timers}
                        </span>
                        <button type="button" class="col-5 col-lg-2 mx-0 mx-lg-1 setActiveInactive ${activeButtonClasses}" title="Set ${isActive ? "inactive" : "active"}">Set ${isActive ? "inactive" : "active"}</button>
                        <button type="button" class="col-5 col-lg-2 mx-0 mx-lg-1 startEndBreak ${breakButtonClasses}" title="${isBreakActive ? "End" : "Start"} break">${isBreakActive ? "End" : "Start"} break</button>
                        <button type="button" class="col-1 col-lg-1 mx-0 mx-lg-1 btn btn-primary btn-floating removeProject float-right align-self-end" title="Remove">
                            <i class="fa fa-trash-alt"></i>
                        </button>
                    </div>
                    `);

            if (isActive) activeTimers[project.id] = data.activeProjects[project.id].start;
            if (isBreakActive) breakTimers[project.id] = data.activeBreaks[project.id].start;
        });
        $('.removeProject').on('click', (event) => {
            let projectId = $(event.currentTarget).parent().data('project-id');
            //console.log(projectId);
            $.ajax({
                url: '/project/remove',
                type: 'delete',
                data: {id: projectId},
                success: () => {
                    refreshProjects();
                }
            });
        });

        $('.setActiveInactive').on('click', event => {
            let parent = $(event.currentTarget).parent();
            let projectId = parent.data("project-id");
            $.ajax({
                url: '/project/change-active',
                type: 'patch',
                data: {id: projectId},
                success: () => {
                    refreshProjects();
                }
            });
        });
        $('.startEndBreak').on('click', event => {
            let parent = $(event.currentTarget).parent();
            let projectId = parent.data("project-id");
            $.ajax({
                url: '/project/change-break',
                type: 'patch',
                data: {id: projectId},
                success: () => {
                    refreshProjects();
                }
            });
        });
        updateTimers();
    }

    function updateTimers() {
        let currentTime = Date.now();
        for (let [key, value] of Object.entries(activeTimers)) {
            let difference = currentTime - value;
            let rounder = difference % 1000;
            let opp = 1000 - rounder;
            if (opp < rounder) difference += opp;
            else difference -= rounder;
            $(`#activeTimer-${key}`).text(`Active: ${millisToDuration(difference)}`)
        }
        for (let [key, value] of Object.entries(breakTimers)) {
            let difference = currentTime - value;
            let rounder = difference % 1000;
            let opp = 1000 - rounder;
            if (opp < rounder) difference += opp;
            else difference -= rounder;
            $(`#breakTimer-${key}`).text(`On break: ${millisToDuration(difference)}`)
        }
    }
</script>
</body>
</html>
