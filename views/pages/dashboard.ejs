<!DOCTYPE html>
<html lang="en">
<head>
    <% include ../partials/head.ejs %>
</head>
<body class="bg-dark-blue">
<% include ../partials/navbar.ejs %>

<div class="container">
    <div class="row text-light mt-3 align-items-center">
        <div class="col-6 col-lg-3 text-end">Selected project:</div>
        <div class="col-6 col-lg-2 fw-bold text-primary" id="selectedProject"></div>
        <div class="mt-3 mt-lg-0 col-12 col-lg-7">
            <select aria-label="Select project" class="form-select bg-dark text-light border-primary"
                    name="selectProject" id="selectProject"></select>
        </div>
    </div>
    <div id="exportButtons" class="row d-none">
        <div class="mt-5 mb-2 col-lg-3 col-md-6 col-12 btn btn-outline-primary csv-download">
            Export as CSV
            <i class="ps-2 fas fa-exclamation-triangle text-danger"
               title="CSV exporting is not working properly. Use the PDF option instead."></i>
        </div>
        <div class="ms-0 ms-lg-2 mt-0 mt-md-5 mb-2 col-lg-3 col-md-6 col-12 btn btn-outline-primary pdf-download">Export
            as PDF
        </div>
    </div>
    <div id="entriesContainer" class="px-3 px-lg-0 row">

    </div>
</div>

<% include ../partials/footer.ejs %>
<script data-main="/javascripts/requirejs/dashboard" src="/javascripts/require.js"></script>
<script src="/javascripts/utils.js"></script>
<script src="/javascripts/fonts.js"></script>

<script>
    const Roboto = {
        regular: robotoRegular,
        bold: robotoBold
    }

    let projectMap = {};
    let activeProject = undefined;
    let selectInput = $('#selectProject');
    let selectedProjectText = $('#selectedProject');

    $(() => {
        refreshProjects(() => {
            getEntries();
        });


        selectInput.on('change', function () {
            activeProject = this.value;
            $.ajax({
                url: '/project/select-project',
                type: 'put',
                data: {id: this.value},
                success: () => {
                    refreshProjects(() => {
                        getEntries();
                    });
                }
            });
        });

        $('.pdf-download').on('click', () => {
            // Acquire data
            let clone = $('#dashboardTable').clone();
            let maxPages = clone.find('td').length;
            let totalDuration = millisToDuration(clone.data('total-duration')+0);
            let projectName = projectMap[activeProject]['name'];

            clone.attr('id', 'tableClone');
            clone.find('td.entryComment .entryCommentText').each((idx, td) => {
                let text = $(td).html();
                text = text.replace(/\n/g, '<br/>');
                $(td).html(text);
            })
            clone.find('th').each((idx, th) => {
                let html = $(th).html();
                html = html.toUpperCase();
                $(th).html(html);
            });
            $('body').append(clone);

            const doc = new jspdf.jsPDF({
                orientation: "landscape"
            });

            // Setup fonts
            doc.addFileToVFS(Roboto.regular.fullName, Roboto.regular.base64);
            doc.addFont(Roboto.regular.fullName, Roboto.regular.displayName, 'normal');
            doc.setFont(Roboto.regular.displayName);
            doc.addFileToVFS(Roboto.bold.fullName, Roboto.bold.base64);
            doc.addFont(Roboto.bold.fullName, Roboto.bold.displayName, 'bold');
            doc.setFont(Roboto.bold.displayName);

            let docWidth = doc.internal.pageSize.getWidth();
            let docHeight = doc.internal.pageSize.getHeight();

            // Create extra pages
            doc.setFontSize(14)
            doc.setFillColor(23, 23, 23);
            doc.setTextColor(255, 193, 8);
            for(let i = 0; i < maxPages; i++) {
                doc.addPage();
                doc.rect(0, 0, 1000, 1000, "F");
                doc.setFont("Roboto", "normal")
                doc.text(14,10,"Timesheet report for");
                doc.setFont("Roboto", "bold")
                doc.text(60.5,10, projectName);
                doc.setFont("Roboto", "normal")
                doc.text(docWidth-67,10,"Total duration:");
                doc.setFont("Roboto", "bold")
                doc.text(docWidth-34,10, totalDuration);
            }

            doc.setPage(2);
            doc.setFont("Roboto", "normal")
            doc.autoTable({
                styles: {
                    font: 'Roboto',
                    fontStyle: 'normal',
                    overflow: 'linebreak'
                },
                headStyles: {
                    fillColor: [255, 193, 8],
                    textColor: [255, 255, 255],
                    fontStyle: 'bold',
                    cellPadding: {top: 2.75, right: 2, bottom: 2, left: 2}
                },
                bodyStyles: {
                    fillColor: [22, 27, 29],
                    textColor: [255, 255, 255],
                    lineWidth: 0
                },
                alternateRowStyles: {
                    fillColor: [13, 18, 18],
                },
                columnStyles: {
                    0: {
                        cellWidth: 20
                    },
                    1: {
                        cellWidth: 57
                    },
                    2: {
                        cellWidth: 57
                    },
                    3: {
                        cellWidth: 25
                    }
                },
                html: '#tableClone',
                theme: 'grid',
                margin: {top: 16, right: 14, bottom: 11, left: 14},
                tableLineWidth: 0.3,
                tableLineColor: [255, 193, 8]
            });

            // Cleanup extra pages
            doc.deletePage(1);
            let tablePages = doc.lastAutoTable.pageCount;
            let totalPages = doc.internal.getNumberOfPages();
            for(let i = 0; i < totalPages-tablePages; i++) {
                doc.deletePage(tablePages+1);
            }

            // Write footer
            let pageCount = doc.internal.getNumberOfPages();
            for(i = 0; i < pageCount; i++) {
                doc.setPage(i);
                doc.setFont("Roboto", "normal")
                doc.text(docWidth/2 - 11, docHeight - 3, "Page")
                doc.setFont("Roboto", "bold")
                doc.text(docWidth/2 - 11 + 13, docHeight - 3, doc.internal.getCurrentPageInfo().pageNumber + "/" + pageCount);
            }
            clone.remove();
            doc.save(`data_${projectMap[activeProject].name.toLowerCase().replace(' ', '_')}__${uuid4('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')}.pdf`);
        })

        $('.csv-download').on('click', () => {
            let csv = [];
            let rows = $("#dashboardTable tr");

            for (let i = 0; i < rows.length; i++) {
                let row = [], cols = rows[i].querySelectorAll("td, th");

                for (let j = 0; j < cols.length; j++)
                    row.push("=\"" + cols[j].innerText + "\"");

                csv.push(row.join(","));
            }

            download(`data_${projectMap[activeProject].name.toLowerCase().replace(' ', '_')}__${uuid4('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')}.csv`, csv.join('\n'));
        });
    });

    function refreshProjects(callback) {
        $.ajax({
            url: '/project/get',
            type: 'get',
            success: data => {
                onLoadProjects(data, callback);
            },
            error: err => {
                console.error(err);
            }
        });
    }

    function getEntries(callback) {
        let entriesContainer = $('#entriesContainer');
        if (activeProject === undefined) {
            $('#exportButtons').addClass('d-none')
            entriesContainer.html(`<span class="mt-5 h2 col-12 text-center text-secondary">No project selected</span>`)
        } else {
            $('#exportButtons').removeClass('d-none');
            $.ajax({
                url: '/project/get-entries',
                type: 'get',
                success: data => {
                    onLoadEntries(data, callback)
                },
                error: err => {
                    console.error(err);
                }
            });
        }
    }

    function onLoadProjects(data, callback) {
        // reset
        projectMap = {};
        selectInput.html("");

        selectInput.append(`<option value='' ${data.selectedProject === undefined ? 'selected' : ''} disabled>Select a project</option>`);
        data.projects.forEach(project => {
            projectMap[project.id] = project;
            selectInput.append(`<option value='${project.id}' ${data.selectedProject == project.id ? 'selected' : ''}>${project.name}</option>`)

            if (data.selectedProject == project.id)
                activeProject = project.id;
        });

        if (projectMap.hasOwnProperty(data.selectedProject)) {
            selectedProjectText.text(projectMap[data.selectedProject].name);
        } else selectedProjectText.text("None");

        if (callback) callback();
    }

    function download(filename, text) {
        var element = document.createElement('a');
        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
        element.setAttribute('download', filename);

        element.style.display = 'none';
        document.body.appendChild(element);

        element.click();

        document.body.removeChild(element);
    }

    function onLoadEntries(data, callback) {
        let entriesContainer = $('#entriesContainer');
        let entries = data.entries;
        let tableEntries = '';
        let totalDuration = 0;
        entries.forEach(entry => {
            let duration = entry.end - entry.start;
            totalDuration += duration;
            let start = formatDate(new Date(entry.start - 0));
            let end = formatDate(new Date(entry.end - 0));
            let durationString = millisToDuration(duration)

            tableEntries += `<tr data-entry-id="${entry.id}" data-entry-has-comment=${(entry.comment != undefined && entry.comment != "")}>
                            <td>${entry.type}</td>
                            <td><span class="text-primary firaCode">${start}</span></td>
                            <td><span class="text-primary firaCode">${end}</span></td>
                            <td><span class="text-primary firaCode">${durationString}</span></td>
                            <td class="entryComment">
                                <span class="entryCommentText user-select-none cursor-pointer" style="white-space: pre-wrap;">${entry.comment || '<i>No comment</i>'}</span>
                                <form class="d-none entryCommentForm"><textarea class="form-control" name="comment" aria-label="Comment"></textarea><input type="submit" style="position: absolute; left: -9999px"/></form>
                            </td>
                        </tr>`
        });
        entriesContainer.html(
            `
<div style="width: 100%; max-width: 100%; overflow-x: auto">
            <table id="dashboardTable" class="col-12 mx-0 px-0 table table-dark text-primary entries" data-total-duration="${totalDuration}">
                  <thead>
                    <tr>
                      <th class="fw-bold text-uppercase" scope="col">Type</th>
                      <th class="fw-bold text-uppercase" scope="col">Start</th>
                      <th class="fw-bold text-uppercase" scope="col">End</th>
                      <th class="fw-bold text-uppercase" scope="col">Duration</th>
                      <th class="fw-bold text-uppercase" scope="col">Comment</th>
                    </tr>
                  </thead>
                  <tbody>${tableEntries}</tbody>
                </table></div>`
        );

        $('.entryComment').on('dblclick', event => {
            let parent = $(event.currentTarget).parent();
            let commentText = parent.find('.entryCommentText');
            let commentForm = parent.find('.entryCommentForm');
            let commentInput = commentForm.find('textarea.form-control');
            let id = parent.data("entry-id");

            commentText.addClass('d-none');
            commentForm.removeClass('d-none');
            if (parent.data("entry-has-comment"))
                commentInput.val(commentText.text());

            commentInput.focus();

            $(commentInput).keydown(function (e) {
                if (e.keyCode == 27) {
                    commentInput.val("");
                    commentForm.addClass('d-none');
                    commentText.removeClass('d-none');
                }
                if (e.ctrlKey && e.keyCode == 13) {
                    $(commentForm).trigger('submit');
                }
            });

            $(commentForm).on('submit', formEvent => {
                formEvent.preventDefault();
                let newCommentText = commentInput.val();
                commentInput.val("");
                commentForm.addClass('d-none');
                commentText.removeClass('d-none');

                if (newCommentText === "" && !parent.data("entry-has-comment")) return;

                commentText.text(newCommentText);
                console.log(newCommentText);
                $.ajax({
                    url: '/project/update-entry-comment',
                    type: 'patch',
                    data: {id: id, comment: newCommentText},
                    success: () => {
                        getEntries();
                    }
                });
            })
        });

        if (callback) callback();
    }
</script>
</body>
</html>
